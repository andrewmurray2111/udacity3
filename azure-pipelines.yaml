name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise comment out the line below. 
pool: myAgentPool

variables:
  python.version: '3.8.x'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'uda3_sc'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.1.2'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformCLI@0
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'tfstorage'
        backendAzureRmStorageAccountName: 'udacity3sta'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    # Run Terraform Validate    
    - task: TerraformCLI@0
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    
    # Run Terraform Apply
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformCLI@0
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
      displayName: 'Upload Fakerrestapi package'
      artifact: drop-fakerestapi

    - task: ArchiveFiles@2
      displayName: "Archive Selenium Tests"
      inputs:
        rootFolderOrFile: "automatedtesting/selenium"
        includeRootFolder: false
        archiveType: "zip"
        archiveFile: '$(Build.BuildId)/selenium-tests.zip'
        replaceExistingArchive: true
    - upload: $(Build.BuildId)/selenium-tests.zip
      artifact: selenium-tests

- stage: Deploy
  jobs:
    - deployment: FakeRestAPI
      displayName: Deploy API to VM
      environment:
        name: 'TEST'
        resourceType: VirtualMachine
      strategy:
        runOnce:
          deploy:
              steps:
              - task: AzureWebApp@1
                inputs:
                  azureSubscription: '$(azureServiceConnectionId)'
                  appType: 'webAppLinux'
                  appName: 'appService-AppService'
                  package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
                  deploymentMethod: 'auto'

- stage: Dependencies
  jobs:
  - job: InstallDependencies
    steps:
      - task: Bash@3
        displayName: Install dependencies
        inputs:
          targetType: 'inline'
          script: |
            sudo apt-get update -y
            sudo apt-get install python3-pip -y
            sudo apt-get install unzip -y
            sudo apt-get install openjdk-11-jre-headless -y
            java --version

            wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.3/install.sh | bash
            source ~/.bashrc
            nvm install --lts

            wget https://raw.githubusercontent.com/Microsoft/OMS-Agent-for-Linux/master/installer/scripts/onboard_agent.sh && sh onboard_agent.sh -w 4be6f1cd-03fb-48d4-9093-cb5b1cc02c44 -s lYbbzvto06zPiGNjTl+JXAV0S2U9nuycymUAggxiBmkrt40zbKXHIeWcMkgewjv0of2uVYYAX8TV9Xw1QMP1yQ== -d opinsights.azure.com
            sudo /opt/microsoft/omsagent/bin/service_control restart 4be6f1cd-03fb-48d4-9093-cb5b1cc02c44

            echo 'Dependencies installed'    

- stage: Test
  jobs:
  - job: Newman
    steps:
      - task: Bash@3
        displayName: 'Run Newman Tests'
        inputs:
          targetType: 'inline'
          script: |
            sudo npm install -g newman reporter
            newman --version
            echo 'Newman installed'      
      # - task: PublishTestResults@2
      #   displayName: 'Publish Postman Newman Results **/newman-*.xml'
      #   condition: always()
      #   inputs:
      #     testResultsFormat: 'JUnit'
      #     testRunTitle: Data and Regression Tests
      #     testResultsFiles: '**/newman-*.xml'

  - job: Selenium
    steps:
    - download: current
      displayName: 'Download Selenium Tests'
      artifact: selenium-tests
    - task: Bash@3
      displayName: 'Running Selenium Test'
      inputs:
        targetType: 'inline'
        script: |
          sudo pip3 install -U selenium
          sudo pip3 install -U requests
          sudo apt-get install -y chromium-browser
          
          wget https://chromedriver.storage.googleapis.com/114.0.5735.90/chromedriver_linux64.zip
          unzip chromedriver_linux64.zip
          sudo mv chromedriver /usr/bin/chromedriver
          sudo chown root:root /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver
          chromium-browser -version
          chromedriver --version

          echo 'Selenium installed' 

          unzip -o $(Pipeline.Workspace)/selenium-tests/selenium-tests.zip -d .
          sudo mkdir -p /var/log/selenium
          sudo chmod 666 /var/log/selenium
          sudo touch /var/log/selenium

          sudo python3 -u selenium-test.py 2>&1 | sudo tee -a /var/log/selenium/selenium-test.log
          
          cd $(System.DefaultWorkingDirectory)
          mkdir -p log/selenium
          sudo cp /var/log/selenium/selenium-test.log log/selenium/selenium-test.log
    - task: PublishPipelineArtifact@1
      displayName: Publish Selenium logs
      inputs:
        targetPath: '/var/log/selenium/selenium-test.log'
        artifactName: 'selenium-logs-artifact'


  - job: JMeter
    steps:
    - task: Bash@3
      displayName: Install JMeter
      inputs:
        targetType: 'inline'
        script: |
          wget https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.tgz -O jmeter.tgz
          tar xzvf jmeter.tgz
          apache-jmeter-5.6/bin/jmeter --version

          echo 'JMeter installed'

    - task: Bash@3
      displayName: JMeter Stress Test
      inputs:
        targetType: 'inline'
        script: |
          echo 'Running JMeter Stress Tests'
    - task: Bash@3
      displayName: JMeter Endurance Test
      inputs:
        targetType: 'inline'
        script: |
          echo 'Running JMeter Endurance Tests'

    # Destroy the resources in Azure
  # - stage: Destroy
  #   jobs:
  #   - job: DestroyInfrastructure
  #     steps:
  #     - task: TerraformCLI@0
  #       displayName: Terraform destroy
  #       inputs:
  #         provider: 'azurerm'
  #         command: 'destroy'
  #         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
  #         environmentServiceNameAzureRM: '$(azureServiceConnectionId)'