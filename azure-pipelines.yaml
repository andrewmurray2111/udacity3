name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

# ToDo: Replace the agent pool name, if you are using Udacity Cloud lab. 
# Otherwise comment out the line below. 
pool: myAgentPool

variables:
  python.version: '3.8.x'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'uda3_sc'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'test'

stages:
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    # Install Terraform on the pipeline agent 
    - task: TerraformInstaller@0
      displayName: 'Terrafom installation'
      inputs:
        terraformVersion: '1.1.2'
    
    # Run Terraform Init on the pipeline agent 
    # ToDo: Replace the resource group name, storage account name, and container name below
    - task: TerraformCLI@0
      displayName: 'Terrafom init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: 'tfstorage'
        backendAzureRmStorageAccountName: 'udacity3sta'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'

    # Run Terraform Validate    
    - task: TerraformCLI@0
      displayName: Terraform validate
      inputs:
        provider: 'azurerm'
        command: 'validate'

    
    # Run Terraform Apply
    # ToDo: Change the workingDirectory path, as applicable to you
    - task: TerraformCLI@0
      displayName: Terraform apply
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
      displayName: 'Upload fakerrestapi Package'
      artifact: drop-fakerestapi
    - task: ArchiveFiles@2
      displayName: 'Archive Automation Tests'
      inputs:
        rootFolderOrFile: 'automatedtesting' 
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-automatedtests.zip' 
    - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-automatedtests.zip'
      displayName: 'Upload Test Package'
      artifact: drop-automatedtests

  - stage: Deploy API to VM
    jobs:
      - deployment: FakeRestAPI
        displayName: Deploy API to VM
        environment:
          name: 'TEST'
          resourceType: VirtualMachine
        strategy:
          runOnce:
            deploy:
                steps:
                - task: AzureWebApp@1
                  inputs:
                    azureSubscription: '$(azureServiceConnectionId)'
                    appType: 'webAppLinux'
                    appName: 'appService-AppService'
                    package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'
                    deploymentMethod: 'auto'

    # Destroy the resources in Azure
  # - stage: Destroy TF resources
  #   jobs:
  #   - job: Destroy
  #     steps:
  #     - task: TerraformCLI@0
  #       displayName: Terraform destroy
  #       inputs:
  #         provider: 'azurerm'
  #         command: 'destroy'
  #         workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
  #         environmentServiceNameAzureRM: '$(azureServiceConnectionId)'